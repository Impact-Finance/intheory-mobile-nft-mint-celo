const fetch = require('node-fetch');
const axios = require('axios');
const FormData = require('form-data');
var form = new FormData();
const { v4: uuid } = require('uuid');
var AWS = require('aws-sdk');

// This function fetches the generated image, streams it to an aws s3 bucket, and then streams it to IPFS.
// After the image is in IFPS, full metadata for the NFT is generated and stored on IPFS as well.
// The output is the CID of the stored metadata.

exports.handler = async function streamIPFS(event, context) {
  try {
    const { topics, imageUrl, wallet } = event.queryStringParameters;
    const id = uuid();
    const s3AccessKeyId = process.env.s3AccessKeyId;
    const s3AccessSecret = process.env.s3AccessSecret;
    const s3Region = process.env.s3Region;
    const s3Bucket = process.env.s3Bucket;

    const TATUM_API_KEY = process.env.TATUM_API_KEY;
    const contractAddress = process.env.contractAddress;

    s3 = new AWS.S3({
      credentials: {
        accessKeyId: s3AccessKeyId,
        secretAccessKey: s3AccessSecret,
        region: s3Region,
      },
    });

    const checkValidWallet = async () => {
      const config = {
        method: 'get',
        url: `https://api-eu1.tatum.io/v3/nft/balance/CELO/${contractAddress}/${wallet}`,
        headers: {
          'x-api-key': TATUM_API_KEY,
        },
      };
      const balance = await axios(config).then(res => {
        return res.data.data;
      });
      if (balance.length > 0) {
        return true;
      } else {
        return false;
      }
    };
    const badAddress = await checkValidWallet();
    console.log(`Bad address: ${badAddress}`);

    if (badAddress === true) {
      console.log('inTheory NFT detected in wallet.');
      return {
        statusCode: 200,
        body: JSON.stringify({
          metadataCID: 'invalid wallet address',
          badAddress: true,
        }),
      };
    } else {
      console.log('No inTheory NFT detected in wallet.');
      const pinNFTMetadata = async imageIPFSUrl => {
        var data = JSON.stringify({
          pinataOptions: {
            cidVersion: 0,
            wrapWithDirectory: false,
          },
          pinataMetadata: {
            name: `Metadata-for-${id}.json`,
          },
          pinataContent: {
            name: 'inTheory Pre-Launch NFT',
            description:
              'This NFT verifies the holder as a supporter of community-governed and open-access science. All holders of an inTheory Pre-Launch NFT will unlock exclusive rewards when inTheory launches in 2023. The image in this NFT was generated by AI and inspired by the research topics listed in the properties field of the token metadata. Visit us at https://impact-finance.io/inTheory to learn more.',
            image: imageIPFSUrl,
            properties: {
              author: 'Impact Finance',
              researchTopics: topics,
              originalOwner: wallet,
            },
          },
        });

        var config = {
          method: 'post',
          url: 'https://api.pinata.cloud/pinning/pinJSONToIPFS',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${process.env.PINATA_JWT}`,
          },
          data: data,
        };

        const res = await axios(config);
        console.log(`Metadata added to IPFS. CID: ${res.data.IpfsHash}`);
        return res.data.IpfsHash;
      };

      const metadataCID = await fetch(imageUrl)
        .then(response => response.buffer())
        .then(buffer => {
          return s3
            .putObject({
              Bucket: s3Bucket,
              Key: `img-${id}.png`,
              Body: buffer,
              ContentType: 'image/png',
            })
            .promise();
        })
        .then(() => {
          let s3Stream = s3
            .getObject({
              Bucket: s3Bucket,
              Key: `img-${id}.png`,
            })
            .createReadStream();
          return s3Stream;
        })
        .then(s3Stream => {
          form.append(`file`, s3Stream, {
            filename: `img-${id}.png`, //required or it fails
          });
          var config = {
            method: 'post',
            url: 'https://api.pinata.cloud/pinning/pinFileToIPFS',
            maxBodyLength: Infinity,
            headers: {
              Authorization: `Bearer ${process.env.PINATA_JWT}`,
              ...form.getHeaders(),
            },
            data: form,
          };
          const metaUrl = axios(config)
            .then(response => {
              return response.data.IpfsHash;
            })
            .then(async hash => {
              const ipfsUrl = 'https://ipfs.io/ipfs/' + hash;
              const metadataCID = await pinNFTMetadata(ipfsUrl);
              return metadataCID;
            })
            .catch(error => {
              console.log(error);
              return false;
            });
          return metaUrl;
        })
        .catch(err => {
          console.log('failed');
          console.log(err);
          return false;
        });

      return {
        statusCode: 200,
        body: JSON.stringify({
          metadataCID: metadataCID,
          badAddress: false,
        }),
      };
    }
  } catch {
    return {
      statusCode: 404,
      body: JSON.stringify({ metadataCID: false, badAddress: false }),
    };
  }
};
