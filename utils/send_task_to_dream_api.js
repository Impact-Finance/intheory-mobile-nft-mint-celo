import axios from 'axios';
import DREAM_API_KEY from './DREAM_API_KEY';

export default async function send_task_to_dream_api(
  style_id = 1,
  prompt = 'future science'
) {
  try {
    /**
Send requests to the dream API.
prompt is the text prompt.
style_id is which style to use (a mapping of ids to names is in the docs).
target_img_path is an optional path to an image to influence the generation.
*/

    const BASE_URL = 'https://api.luan.tools/api/tasks/';

    // Step 0: Auth
    // Set your authorization key to the key generated by your Dream API Dashboard
    const headers = {
      headers: {
        Authorization: `Bearer ${DREAM_API_KEY}`,
        'Content-Type': 'application/json',
      },
    };

    // Step 1) make a POST request to https://api.luan.tools/api/tasks/
    let post_payload = { use_target_image: false };
    //   console.log('Creating task...');
    let response = await axios
      .post(BASE_URL, post_payload, headers)
      .catch(error => console.log(error.response));
    //   console.log('Step 1 Complete!');

    // Step 2) make a PUT request to https://api.luan.tools/api/tasks/{task_id}
    // where task id is provided in the response from the request in Step 1.
    const task_id = response.data.id;
    const task_url = BASE_URL + task_id;
    //   console.log('PUTting to ' + task_url);
    const put_payload = {
      input_spec: {
        style: style_id, //integer corresponding to a style (mapping below)
        prompt: prompt, //str - the text prompt for the image generation
        target_image_weight: null, //Optional[float] - target image influence strength. defaults to 0.1.
        width: 960, //Optional[int] - the width of the image, defaults to 960
        height: 1568, //Optional[int] - the height of the image, defaults to 1568
      },
    };
    await axios
      .put(task_url, JSON.stringify(put_payload), headers)
      .catch(error => console.log(error.response));
    //   console.log('Step 2 Complete!');

    // Step 3) Keep polling for images until the generation completes
    while (true == true) {
      let get_response = await axios
        .get(task_url, headers)
        .catch(error => console.log(error.response));
      let state = get_response.data.state;
      if (state == 'generating') {
        //   console.log('generating');
        continue;
      } else if (state == 'failed') {
        //   console.log('failed!');
        return false;
      } else if (state == 'completed') {
        let final_url = get_response.data.result;
        return final_url;
      }
      await new Promise(res => setTimeout(res, 4000));
    }
  } catch (e) {
    return false;
  }
}
